/*
 * generated by Xtext 2.21.0
 */
package org.xtext.htwg.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.htwg.ide.contentassist.antlr.internal.InternalLitManParser;
import org.xtext.htwg.services.LitManGrammarAccess;

public class LitManParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LitManGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LitManGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLitTypesAccess().getAlternatives(), "rule__LitTypes__Alternatives");
			builder.put(grammarAccess.getBookAccess().getPagesAlternatives_12_0(), "rule__Book__PagesAlternatives_12_0");
			builder.put(grammarAccess.getBookAccess().getDateAlternatives_15_0(), "rule__Book__DateAlternatives_15_0");
			builder.put(grammarAccess.getJournalArticleAccess().getPagesAlternatives_18_0(), "rule__JournalArticle__PagesAlternatives_18_0");
			builder.put(grammarAccess.getJournalArticleAccess().getDateAlternatives_21_0(), "rule__JournalArticle__DateAlternatives_21_0");
			builder.put(grammarAccess.getBookAccess().getGroup(), "rule__Book__Group__0");
			builder.put(grammarAccess.getJournalArticleAccess().getGroup(), "rule__JournalArticle__Group__0");
			builder.put(grammarAccess.getAuthorAccess().getGroup(), "rule__Author__Group__0");
			builder.put(grammarAccess.getListAuthorsAccess().getGroup(), "rule__ListAuthors__Group__0");
			builder.put(grammarAccess.getPageRangeAccess().getGroup(), "rule__PageRange__Group__0");
			builder.put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
			builder.put(grammarAccess.getLitManAccess().getLiteraturAssignment(), "rule__LitMan__LiteraturAssignment");
			builder.put(grammarAccess.getBookAccess().getTitleAssignment_4(), "rule__Book__TitleAssignment_4");
			builder.put(grammarAccess.getBookAccess().getAuthorsAssignment_8(), "rule__Book__AuthorsAssignment_8");
			builder.put(grammarAccess.getBookAccess().getPagesAssignment_12(), "rule__Book__PagesAssignment_12");
			builder.put(grammarAccess.getBookAccess().getDateAssignment_15(), "rule__Book__DateAssignment_15");
			builder.put(grammarAccess.getJournalArticleAccess().getTitleAssignment_4(), "rule__JournalArticle__TitleAssignment_4");
			builder.put(grammarAccess.getJournalArticleAccess().getAuthorsAssignment_8(), "rule__JournalArticle__AuthorsAssignment_8");
			builder.put(grammarAccess.getJournalArticleAccess().getVolumeAssignment_12(), "rule__JournalArticle__VolumeAssignment_12");
			builder.put(grammarAccess.getJournalArticleAccess().getIssueAssignment_15(), "rule__JournalArticle__IssueAssignment_15");
			builder.put(grammarAccess.getJournalArticleAccess().getPagesAssignment_18(), "rule__JournalArticle__PagesAssignment_18");
			builder.put(grammarAccess.getJournalArticleAccess().getDateAssignment_21(), "rule__JournalArticle__DateAssignment_21");
			builder.put(grammarAccess.getAuthorAccess().getFirstnameAssignment_1(), "rule__Author__FirstnameAssignment_1");
			builder.put(grammarAccess.getAuthorAccess().getLastnameAssignment_3(), "rule__Author__LastnameAssignment_3");
			builder.put(grammarAccess.getListAuthorsAccess().getAuthorsAssignment_0(), "rule__ListAuthors__AuthorsAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LitManGrammarAccess grammarAccess;

	@Override
	protected InternalLitManParser createParser() {
		InternalLitManParser result = new InternalLitManParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LitManGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LitManGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
