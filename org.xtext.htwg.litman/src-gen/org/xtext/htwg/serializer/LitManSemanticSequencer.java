/*
 * generated by Xtext 2.21.0
 */
package org.xtext.htwg.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.htwg.litMan.Author;
import org.xtext.htwg.litMan.Book;
import org.xtext.htwg.litMan.JournalArticle;
import org.xtext.htwg.litMan.ListAuthors;
import org.xtext.htwg.litMan.LitMan;
import org.xtext.htwg.litMan.LitManPackage;
import org.xtext.htwg.services.LitManGrammarAccess;

@SuppressWarnings("all")
public class LitManSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LitManGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LitManPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LitManPackage.AUTHOR:
				sequence_Author(context, (Author) semanticObject); 
				return; 
			case LitManPackage.BOOK:
				sequence_Book(context, (Book) semanticObject); 
				return; 
			case LitManPackage.JOURNAL_ARTICLE:
				sequence_JournalArticle(context, (JournalArticle) semanticObject); 
				return; 
			case LitManPackage.LIST_AUTHORS:
				sequence_ListAuthors(context, (ListAuthors) semanticObject); 
				return; 
			case LitManPackage.LIT_MAN:
				sequence_LitMan(context, (LitMan) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Author returns Author
	 *
	 * Constraint:
	 *     (firstname=STRING lastname=STRING)
	 */
	protected void sequence_Author(ISerializationContext context, Author semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LitManPackage.Literals.AUTHOR__FIRSTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LitManPackage.Literals.AUTHOR__FIRSTNAME));
			if (transientValues.isValueTransient(semanticObject, LitManPackage.Literals.AUTHOR__LASTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LitManPackage.Literals.AUTHOR__LASTNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAuthorAccess().getFirstnameSTRINGTerminalRuleCall_1_0(), semanticObject.getFirstname());
		feeder.accept(grammarAccess.getAuthorAccess().getLastnameSTRINGTerminalRuleCall_3_0(), semanticObject.getLastname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LitTypes returns Book
	 *     Book returns Book
	 *
	 * Constraint:
	 *     (title=STRING authors=ListAuthors (pages=PageSingle | pages=PageRange) (date=Year | date=Date))
	 */
	protected void sequence_Book(ISerializationContext context, Book semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LitTypes returns JournalArticle
	 *     JournalArticle returns JournalArticle
	 *
	 * Constraint:
	 *     (
	 *         title=STRING 
	 *         authors=ListAuthors 
	 *         volume=INT 
	 *         issue=INT 
	 *         (pages=PageSingle | pages=PageRange) 
	 *         (date=Year | date=Date)
	 *     )
	 */
	protected void sequence_JournalArticle(ISerializationContext context, JournalArticle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListAuthors returns ListAuthors
	 *
	 * Constraint:
	 *     authors+=Author+
	 */
	protected void sequence_ListAuthors(ISerializationContext context, ListAuthors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LitMan returns LitMan
	 *
	 * Constraint:
	 *     literatur+=LitTypes+
	 */
	protected void sequence_LitMan(ISerializationContext context, LitMan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
