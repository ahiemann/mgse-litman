/**
 * generated by Xtext 2.21.0
 */
package org.xtext.htwg.litMan.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.htwg.litMan.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LitManFactoryImpl extends EFactoryImpl implements LitManFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LitManFactory init()
  {
    try
    {
      LitManFactory theLitManFactory = (LitManFactory)EPackage.Registry.INSTANCE.getEFactory(LitManPackage.eNS_URI);
      if (theLitManFactory != null)
      {
        return theLitManFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LitManFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LitManFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LitManPackage.LIT_MAN: return createLitMan();
      case LitManPackage.LIT_TYPES: return createLitTypes();
      case LitManPackage.BOOK: return createBook();
      case LitManPackage.JOURNAL_ARTICLE: return createJournalArticle();
      case LitManPackage.AUTHOR: return createAuthor();
      case LitManPackage.LIST_AUTHORS: return createListAuthors();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LitMan createLitMan()
  {
    LitManImpl litMan = new LitManImpl();
    return litMan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LitTypes createLitTypes()
  {
    LitTypesImpl litTypes = new LitTypesImpl();
    return litTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Book createBook()
  {
    BookImpl book = new BookImpl();
    return book;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JournalArticle createJournalArticle()
  {
    JournalArticleImpl journalArticle = new JournalArticleImpl();
    return journalArticle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Author createAuthor()
  {
    AuthorImpl author = new AuthorImpl();
    return author;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListAuthors createListAuthors()
  {
    ListAuthorsImpl listAuthors = new ListAuthorsImpl();
    return listAuthors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LitManPackage getLitManPackage()
  {
    return (LitManPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LitManPackage getPackage()
  {
    return LitManPackage.eINSTANCE;
  }

} //LitManFactoryImpl
