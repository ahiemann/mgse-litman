/*
 * generated by Xtext 2.21.0
 */
grammar InternalLitMan;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.htwg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.htwg.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.htwg.services.LitManGrammarAccess;

}

@parser::members {

 	private LitManGrammarAccess grammarAccess;

    public InternalLitManParser(TokenStream input, LitManGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LitMan";
   	}

   	@Override
   	protected LitManGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLitMan
entryRuleLitMan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitManRule()); }
	iv_ruleLitMan=ruleLitMan
	{ $current=$iv_ruleLitMan.current; }
	EOF;

// Rule LitMan
ruleLitMan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLitManAccess().getLiteraturLitTypesParserRuleCall_0());
			}
			lv_literatur_0_0=ruleLitTypes
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLitManRule());
				}
				add(
					$current,
					"literatur",
					lv_literatur_0_0,
					"org.xtext.htwg.LitMan.LitTypes");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleLitTypes
entryRuleLitTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitTypesRule()); }
	iv_ruleLitTypes=ruleLitTypes
	{ $current=$iv_ruleLitTypes.current; }
	EOF;

// Rule LitTypes
ruleLitTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLitTypesAccess().getBookParserRuleCall_0());
		}
		this_Book_0=ruleBook
		{
			$current = $this_Book_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLitTypesAccess().getJournalArticleParserRuleCall_1());
		}
		this_JournalArticle_1=ruleJournalArticle
		{
			$current = $this_JournalArticle_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBook
entryRuleBook returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBookRule()); }
	iv_ruleBook=ruleBook
	{ $current=$iv_ruleBook.current; }
	EOF;

// Rule Book
ruleBook returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Book'
		{
			newLeafNode(otherlv_0, grammarAccess.getBookAccess().getBookKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBookAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Title'
		{
			newLeafNode(otherlv_2, grammarAccess.getBookAccess().getTitleKeyword_2());
		}
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getBookAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				lv_title_4_0=RULE_STRING
				{
					newLeafNode(lv_title_4_0, grammarAccess.getBookAccess().getTitleSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBookRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='Authors'
		{
			newLeafNode(otherlv_5, grammarAccess.getBookAccess().getAuthorsKeyword_5());
		}
		otherlv_6='=>'
		{
			newLeafNode(otherlv_6, grammarAccess.getBookAccess().getEqualsSignGreaterThanSignKeyword_6());
		}
		otherlv_7='['
		{
			newLeafNode(otherlv_7, grammarAccess.getBookAccess().getLeftSquareBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBookAccess().getAuthorsListAuthorsParserRuleCall_8_0());
				}
				lv_authors_8_0=ruleListAuthors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBookRule());
					}
					set(
						$current,
						"authors",
						lv_authors_8_0,
						"org.xtext.htwg.LitMan.ListAuthors");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getBookAccess().getRightSquareBracketKeyword_9());
		}
		otherlv_10='Pages'
		{
			newLeafNode(otherlv_10, grammarAccess.getBookAccess().getPagesKeyword_10());
		}
		otherlv_11='=>'
		{
			newLeafNode(otherlv_11, grammarAccess.getBookAccess().getEqualsSignGreaterThanSignKeyword_11());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBookAccess().getPagesPageSingleParserRuleCall_12_0_0());
					}
					lv_pages_12_1=rulePageSingle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBookRule());
						}
						set(
							$current,
							"pages",
							lv_pages_12_1,
							"org.xtext.htwg.LitMan.PageSingle");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBookAccess().getPagesPageRangeParserRuleCall_12_0_1());
					}
					lv_pages_12_2=rulePageRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBookRule());
						}
						set(
							$current,
							"pages",
							lv_pages_12_2,
							"org.xtext.htwg.LitMan.PageRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_13='Date'
		{
			newLeafNode(otherlv_13, grammarAccess.getBookAccess().getDateKeyword_13());
		}
		otherlv_14='=>'
		{
			newLeafNode(otherlv_14, grammarAccess.getBookAccess().getEqualsSignGreaterThanSignKeyword_14());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBookAccess().getDateYearParserRuleCall_15_0_0());
					}
					lv_date_15_1=ruleYear
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBookRule());
						}
						set(
							$current,
							"date",
							lv_date_15_1,
							"org.xtext.htwg.LitMan.Year");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBookAccess().getDateDateParserRuleCall_15_0_1());
					}
					lv_date_15_2=ruleDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBookRule());
						}
						set(
							$current,
							"date",
							lv_date_15_2,
							"org.xtext.htwg.LitMan.Date");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getBookAccess().getRightCurlyBracketKeyword_16());
		}
	)
;

// Entry rule entryRuleJournalArticle
entryRuleJournalArticle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJournalArticleRule()); }
	iv_ruleJournalArticle=ruleJournalArticle
	{ $current=$iv_ruleJournalArticle.current; }
	EOF;

// Rule JournalArticle
ruleJournalArticle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Article'
		{
			newLeafNode(otherlv_0, grammarAccess.getJournalArticleAccess().getArticleKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getJournalArticleAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Title'
		{
			newLeafNode(otherlv_2, grammarAccess.getJournalArticleAccess().getTitleKeyword_2());
		}
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				lv_title_4_0=RULE_STRING
				{
					newLeafNode(lv_title_4_0, grammarAccess.getJournalArticleAccess().getTitleSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJournalArticleRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='Authors'
		{
			newLeafNode(otherlv_5, grammarAccess.getJournalArticleAccess().getAuthorsKeyword_5());
		}
		otherlv_6='=>'
		{
			newLeafNode(otherlv_6, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_6());
		}
		otherlv_7='['
		{
			newLeafNode(otherlv_7, grammarAccess.getJournalArticleAccess().getLeftSquareBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJournalArticleAccess().getAuthorsListAuthorsParserRuleCall_8_0());
				}
				lv_authors_8_0=ruleListAuthors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJournalArticleRule());
					}
					set(
						$current,
						"authors",
						lv_authors_8_0,
						"org.xtext.htwg.LitMan.ListAuthors");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getJournalArticleAccess().getRightSquareBracketKeyword_9());
		}
		otherlv_10='Volume'
		{
			newLeafNode(otherlv_10, grammarAccess.getJournalArticleAccess().getVolumeKeyword_10());
		}
		otherlv_11='=>'
		{
			newLeafNode(otherlv_11, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_11());
		}
		(
			(
				lv_volume_12_0=RULE_INT
				{
					newLeafNode(lv_volume_12_0, grammarAccess.getJournalArticleAccess().getVolumeINTTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJournalArticleRule());
					}
					setWithLastConsumed(
						$current,
						"volume",
						lv_volume_12_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_13='Issue'
		{
			newLeafNode(otherlv_13, grammarAccess.getJournalArticleAccess().getIssueKeyword_13());
		}
		otherlv_14='=>'
		{
			newLeafNode(otherlv_14, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_14());
		}
		(
			(
				lv_issue_15_0=RULE_INT
				{
					newLeafNode(lv_issue_15_0, grammarAccess.getJournalArticleAccess().getIssueINTTerminalRuleCall_15_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJournalArticleRule());
					}
					setWithLastConsumed(
						$current,
						"issue",
						lv_issue_15_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_16='Pages'
		{
			newLeafNode(otherlv_16, grammarAccess.getJournalArticleAccess().getPagesKeyword_16());
		}
		otherlv_17='=>'
		{
			newLeafNode(otherlv_17, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_17());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJournalArticleAccess().getPagesPageSingleParserRuleCall_18_0_0());
					}
					lv_pages_18_1=rulePageSingle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJournalArticleRule());
						}
						set(
							$current,
							"pages",
							lv_pages_18_1,
							"org.xtext.htwg.LitMan.PageSingle");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJournalArticleAccess().getPagesPageRangeParserRuleCall_18_0_1());
					}
					lv_pages_18_2=rulePageRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJournalArticleRule());
						}
						set(
							$current,
							"pages",
							lv_pages_18_2,
							"org.xtext.htwg.LitMan.PageRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_19='Date'
		{
			newLeafNode(otherlv_19, grammarAccess.getJournalArticleAccess().getDateKeyword_19());
		}
		otherlv_20='=>'
		{
			newLeafNode(otherlv_20, grammarAccess.getJournalArticleAccess().getEqualsSignGreaterThanSignKeyword_20());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJournalArticleAccess().getDateYearParserRuleCall_21_0_0());
					}
					lv_date_21_1=ruleYear
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJournalArticleRule());
						}
						set(
							$current,
							"date",
							lv_date_21_1,
							"org.xtext.htwg.LitMan.Year");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJournalArticleAccess().getDateDateParserRuleCall_21_0_1());
					}
					lv_date_21_2=ruleDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJournalArticleRule());
						}
						set(
							$current,
							"date",
							lv_date_21_2,
							"org.xtext.htwg.LitMan.Date");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getJournalArticleAccess().getRightCurlyBracketKeyword_22());
		}
	)
;

// Entry rule entryRuleAuthor
entryRuleAuthor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAuthorRule()); }
	iv_ruleAuthor=ruleAuthor
	{ $current=$iv_ruleAuthor.current; }
	EOF;

// Rule Author
ruleAuthor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='f'
		{
			newLeafNode(otherlv_0, grammarAccess.getAuthorAccess().getFKeyword_0());
		}
		(
			(
				lv_firstname_1_0=RULE_STRING
				{
					newLeafNode(lv_firstname_1_0, grammarAccess.getAuthorAccess().getFirstnameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAuthorRule());
					}
					setWithLastConsumed(
						$current,
						"firstname",
						lv_firstname_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='l'
		{
			newLeafNode(otherlv_2, grammarAccess.getAuthorAccess().getLKeyword_2());
		}
		(
			(
				lv_lastname_3_0=RULE_STRING
				{
					newLeafNode(lv_lastname_3_0, grammarAccess.getAuthorAccess().getLastnameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAuthorRule());
					}
					setWithLastConsumed(
						$current,
						"lastname",
						lv_lastname_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleListAuthors
entryRuleListAuthors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListAuthorsRule()); }
	iv_ruleListAuthors=ruleListAuthors
	{ $current=$iv_ruleListAuthors.current; }
	EOF;

// Rule ListAuthors
ruleListAuthors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListAuthorsAccess().getAuthorsAuthorParserRuleCall_0_0());
				}
				lv_authors_0_0=ruleAuthor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListAuthorsRule());
					}
					add(
						$current,
						"authors",
						lv_authors_0_0,
						"org.xtext.htwg.LitMan.Author");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getListAuthorsAccess().getCommaKeyword_1());
			}
		)?
	)*
;

// Entry rule entryRulePageSingle
entryRulePageSingle returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPageSingleRule()); }
	iv_rulePageSingle=rulePageSingle
	{ $current=$iv_rulePageSingle.current.getText(); }
	EOF;

// Rule PageSingle
rulePageSingle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getPageSingleAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRulePageRange
entryRulePageRange returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPageRangeRule()); }
	iv_rulePageRange=rulePageRange
	{ $current=$iv_rulePageRange.current.getText(); }
	EOF;

// Rule PageRange
rulePageRange returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getPageRangeAccess().getINTTerminalRuleCall_0());
		}
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPageRangeAccess().getHyphenMinusKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getPageRangeAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleYear
entryRuleYear returns [String current=null]:
	{ newCompositeNode(grammarAccess.getYearRule()); }
	iv_ruleYear=ruleYear
	{ $current=$iv_ruleYear.current.getText(); }
	EOF;

// Rule Year
ruleYear returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getYearAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleDate
entryRuleDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	iv_ruleDate=ruleDate
	{ $current=$iv_ruleDate.current.getText(); }
	EOF;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDateAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDateAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDateAccess().getINTTerminalRuleCall_2());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDateAccess().getFullStopKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getDateAccess().getINTTerminalRuleCall_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
